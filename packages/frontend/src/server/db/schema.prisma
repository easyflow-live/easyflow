generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                                                          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                        String?               @db.VarChar
  email                                                       String                @unique @db.VarChar
  image                                                       String?               @db.VarChar
  created_at                                                  DateTime              @default(now()) @db.Timestamptz(6)
  updated_at                                                  DateTime              @default(now()) @db.Timestamptz(6)
  theme                                                       String                @default("dark") @db.VarChar
  email_verified                                              DateTime?             @db.Timestamptz(6)
  username                                                    String?               @unique @db.VarChar
  description                                                 String?               @db.VarChar
  board_members                                               board_members[]
  boards                                                      boards[]
  sessions                                                    sessions[]
  user_board_stars                                            user_board_stars[]
  user_following_user_user_following_user_following_idTousers user_following_user[] @relation("user_following_user_following_idTousers")
  user_following_user_user_following_user_user_idTousers      user_following_user[] @relation("user_following_user_user_idTousers")
  user_role                                                   user_role[]
}

model boards {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)
  owner_id         String             @db.Uuid
  name             String             @db.VarChar
  visibility       String             @default("public") @db.VarChar
  users            users              @relation(fields: [owner_id], references: [id])
  board_members    board_members[]
  user_board_stars user_board_stars[]
}

model sessions {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String   @db.Uuid
  expires       DateTime @db.Timestamptz(6)
  session_token String   @db.VarChar
  access_token  String   @db.VarChar
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
  users         users    @relation(fields: [user_id], references: [id])
}

model verification_requests {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String   @db.VarChar
  token      String   @db.VarChar
  expires    DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
}

model board_members {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  member_id  String   @db.Uuid
  board_id   String   @db.Uuid
  role_id    String   @db.Uuid
  active     Boolean
  boards     boards   @relation(fields: [board_id], references: [id])
  users      users    @relation(fields: [member_id], references: [id])
  roles      roles    @relation(fields: [role_id], references: [id])
}

model roles {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  name          String          @unique @db.VarChar
  board_members board_members[]
  user_role     user_role[]
}

model user_board_stars {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user_id    String   @db.Uuid
  board_id   String   @db.Uuid
  star       Boolean
  boards     boards   @relation(fields: [board_id], references: [id])
  users      users    @relation(fields: [user_id], references: [id])
}

model user_following_user {
  id                                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                                    DateTime @default(now()) @db.Timestamptz(6)
  user_id                                       String   @db.Uuid
  following_id                                  String   @db.Uuid
  follow                                        Boolean
  users_user_following_user_following_idTousers users    @relation("user_following_user_following_idTousers", fields: [following_id], references: [id])
  users_user_following_user_user_idTousers      users    @relation("user_following_user_user_idTousers", fields: [user_id], references: [id])
}

model user_role {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  role_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  roles      roles    @relation(fields: [role_id], references: [id])
  users      users    @relation(fields: [user_id], references: [id])
}
