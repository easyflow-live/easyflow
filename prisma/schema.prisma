// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
}

enum Status {
  pending
  rejected
  accepted
}

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  firstName String
  lastName  String
  email     String   @unique
  avatarUrl String
  username  String
  role      Role     @default(USER)

  boards       Board[]
  subscription UserSubscription?
  invitations  BoardInvite[]     @relation("Invitations")
  invites      BoardInvite[]     @relation("Invites")
  members      Member[]
  Card         Card[]
}

model Board {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  archived  Boolean  @default(false)
  public    Boolean  @default(false)
  title     String
  ownerId   String
  code      String

  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  boardInvites BoardInvite[]
  members      Member[]
  groups       Group[]

  @@index([ownerId])
}

model Group {
  id         String   @id @default(uuid())
  title      String
  index      Int
  color      String
  cardsLimit Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  boardId    String

  bord  Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards Card[]

  @@index([boardId])
}

model Card {
  id         String   @id @default(uuid())
  title      String
  text       String
  index      Int
  color      String
  date       DateTime @default(now())
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  groupId    String
  assigneeId String

  group    Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignee User  @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([assigneeId])
}

model BoardInvite {
  boardId    String
  userId     String
  fromUserId String
  createdAt  DateTime @default(now())
  expired    Boolean  @default(false)
  status     Status   @default(pending)

  board    Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user     User  @relation("Invitations", fields: [userId], references: [id], onDelete: Cascade)
  fromUser User  @relation("Invites", fields: [fromUserId], references: [id], onDelete: Cascade)

  @@id([boardId, userId])
  @@index([boardId])
  @@index([userId])
  @@index([fromUserId])
}

model Member {
  boardId   String
  userId    String
  createdAt DateTime @default(now())

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([boardId, userId])
  @@index([boardId])
  @@index([userId])
}

model UserSubscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
